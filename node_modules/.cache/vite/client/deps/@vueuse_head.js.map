{
  "version": 3,
  "sources": ["../../../../@vueuse/head/dist/index.mjs", "../../../../@unhead/shared/dist/index.mjs", "../../../../@unhead/ssr/dist/index.mjs"],
  "sourcesContent": ["import { createHead as createHead$1, Vue2ProvideUnheadPlugin } from '@unhead/vue';\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, createHeadCore, injectHead, unheadVueComposablesImports, useHead, useHeadSafe, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta } from '@unhead/vue';\nimport { polyfillAsVueUseHead } from '@unhead/vue/polyfill';\nimport { renderSSRHead } from '@unhead/ssr';\nexport { Head } from '@unhead/vue/components';\n\nfunction createHead(initHeadObject, options) {\n  const unhead = createHead$1(options || {});\n  const legacyHead = polyfillAsVueUseHead(unhead);\n  if (initHeadObject)\n    legacyHead.push(initHeadObject);\n  return legacyHead;\n}\n\nconst HeadVuePlugin = Vue2ProvideUnheadPlugin;\nconst renderHeadToString = (head) => renderSSRHead(head.unhead);\n\nexport { HeadVuePlugin, createHead, renderHeadToString };\n", "function asArray$1(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\nconst SelfClosingTags = /* @__PURE__ */ new Set([\"meta\", \"link\", \"base\"]);\nconst TagsWithInnerContent = /* @__PURE__ */ new Set([\"title\", \"titleTemplate\", \"script\", \"style\", \"noscript\"]);\nconst HasElementTags = /* @__PURE__ */ new Set([\n  \"base\",\n  \"meta\",\n  \"link\",\n  \"style\",\n  \"script\",\n  \"noscript\"\n]);\nconst ValidHeadTags = /* @__PURE__ */ new Set([\n  \"title\",\n  \"titleTemplate\",\n  \"templateParams\",\n  \"base\",\n  \"htmlAttrs\",\n  \"bodyAttrs\",\n  \"meta\",\n  \"link\",\n  \"style\",\n  \"script\",\n  \"noscript\"\n]);\nconst UniqueTags = /* @__PURE__ */ new Set([\"base\", \"title\", \"titleTemplate\", \"bodyAttrs\", \"htmlAttrs\", \"templateParams\"]);\nconst TagConfigKeys = /* @__PURE__ */ new Set([\"tagPosition\", \"tagPriority\", \"tagDuplicateStrategy\", \"children\", \"innerHTML\", \"textContent\", \"processTemplateParams\"]);\nconst IsBrowser = typeof window !== \"undefined\";\nconst composableNames = [\n  \"getActiveHead\",\n  \"useHead\",\n  \"useSeoMeta\",\n  \"useHeadSafe\",\n  \"useServerHead\",\n  \"useServerSeoMeta\",\n  \"useServerHeadSafe\"\n];\n\nfunction defineHeadPlugin(plugin) {\n  return plugin;\n}\n\nfunction hashCode(s) {\n  let h = 9;\n  for (let i = 0; i < s.length; )\n    h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9);\n  return ((h ^ h >>> 9) + 65536).toString(16).substring(1, 8).toLowerCase();\n}\nfunction hashTag(tag) {\n  if (tag._h) {\n    return tag._h;\n  }\n  if (tag._d) {\n    return hashCode(tag._d);\n  }\n  let content = `${tag.tag}:${tag.textContent || tag.innerHTML || \"\"}:`;\n  for (const key in tag.props) {\n    content += `${key}:${String(tag.props[key])},`;\n  }\n  return hashCode(content);\n}\n\nfunction asArray(input) {\n  return Array.isArray(input) ? input : [input];\n}\nconst InternalKeySymbol = \"_$key\";\nfunction packObject(input, options) {\n  const keys = Object.keys(input);\n  let [k, v] = keys;\n  options = options || {};\n  options.key = options.key || k;\n  options.value = options.value || v;\n  options.resolveKey = options.resolveKey || ((k2) => k2);\n  const resolveKey = (index) => {\n    const arr = asArray(options[index]);\n    return arr.find((k2) => {\n      if (typeof k2 === \"string\" && k2.includes(\".\")) {\n        return k2;\n      }\n      return k2 && keys.includes(k2);\n    });\n  };\n  const resolveValue = (k2, input2) => {\n    if (k2.includes(\".\")) {\n      const paths = k2.split(\".\");\n      let val = input2;\n      for (const path of paths)\n        val = val[path];\n      return val;\n    }\n    return input2[k2];\n  };\n  k = resolveKey(\"key\") || k;\n  v = resolveKey(\"value\") || v;\n  const dedupeKeyPrefix = input.key ? `${InternalKeySymbol}${input.key}-` : \"\";\n  let keyValue = resolveValue(k, input);\n  keyValue = options.resolveKey(keyValue);\n  return {\n    [`${dedupeKeyPrefix}${keyValue}`]: resolveValue(v, input)\n  };\n}\n\nfunction packArray(input, options) {\n  const packed = {};\n  for (const i of input) {\n    const packedObj = packObject(i, options);\n    const pKey = Object.keys(packedObj)[0];\n    const isDedupeKey = pKey.startsWith(InternalKeySymbol);\n    if (!isDedupeKey && packed[pKey]) {\n      packed[pKey] = Array.isArray(packed[pKey]) ? packed[pKey] : [packed[pKey]];\n      packed[pKey].push(Object.values(packedObj)[0]);\n    } else {\n      packed[isDedupeKey ? pKey.split(\"-\").slice(1).join(\"-\") || pKey : pKey] = packedObj[pKey];\n    }\n  }\n  return packed;\n}\n\nfunction unpackToArray(input, options) {\n  const unpacked = [];\n  const kFn = options.resolveKeyData || ((ctx) => ctx.key);\n  const vFn = options.resolveValueData || ((ctx) => ctx.value);\n  for (const [k, v] of Object.entries(input)) {\n    unpacked.push(...(Array.isArray(v) ? v : [v]).map((i) => {\n      const ctx = { key: k, value: i };\n      const val = vFn(ctx);\n      if (typeof val === \"object\")\n        return unpackToArray(val, options);\n      if (Array.isArray(val))\n        return val;\n      return {\n        [typeof options.key === \"function\" ? options.key(ctx) : options.key]: kFn(ctx),\n        [typeof options.value === \"function\" ? options.value(ctx) : options.value]: val\n      };\n    }).flat());\n  }\n  return unpacked;\n}\n\nfunction unpackToString(value, options) {\n  return Object.entries(value).map(([key, value2]) => {\n    if (typeof value2 === \"object\")\n      value2 = unpackToString(value2, options);\n    if (options.resolve) {\n      const resolved = options.resolve({ key, value: value2 });\n      if (typeof resolved !== \"undefined\")\n        return resolved;\n    }\n    if (typeof value2 === \"number\")\n      value2 = value2.toString();\n    if (typeof value2 === \"string\" && options.wrapValue) {\n      value2 = value2.replace(new RegExp(options.wrapValue, \"g\"), `\\\\${options.wrapValue}`);\n      value2 = `${options.wrapValue}${value2}${options.wrapValue}`;\n    }\n    return `${key}${options.keyValueSeparator || \"\"}${value2}`;\n  }).join(options.entrySeparator || \"\");\n}\n\nconst p = (p2) => ({ keyValue: p2, metaKey: \"property\" });\nconst k = (p2) => ({ keyValue: p2 });\nconst MetaPackingSchema = {\n  appleItunesApp: {\n    unpack: {\n      entrySeparator: \", \",\n      resolve({ key, value }) {\n        return `${fixKeyCase(key)}=${value}`;\n      }\n    }\n  },\n  articleExpirationTime: p(\"article:expiration_time\"),\n  articleModifiedTime: p(\"article:modified_time\"),\n  articlePublishedTime: p(\"article:published_time\"),\n  bookReleaseDate: p(\"book:release_date\"),\n  charset: {\n    metaKey: \"charset\"\n  },\n  contentSecurityPolicy: {\n    unpack: {\n      entrySeparator: \"; \",\n      resolve({ key, value }) {\n        return `${fixKeyCase(key)} ${value}`;\n      }\n    },\n    metaKey: \"http-equiv\"\n  },\n  contentType: {\n    metaKey: \"http-equiv\"\n  },\n  defaultStyle: {\n    metaKey: \"http-equiv\"\n  },\n  fbAppId: p(\"fb:app_id\"),\n  msapplicationConfig: k(\"msapplication-Config\"),\n  msapplicationTileColor: k(\"msapplication-TileColor\"),\n  msapplicationTileImage: k(\"msapplication-TileImage\"),\n  ogAudioSecureUrl: p(\"og:audio:secure_url\"),\n  ogAudioUrl: p(\"og:audio\"),\n  ogImageSecureUrl: p(\"og:image:secure_url\"),\n  ogImageUrl: p(\"og:image\"),\n  ogSiteName: p(\"og:site_name\"),\n  ogVideoSecureUrl: p(\"og:video:secure_url\"),\n  ogVideoUrl: p(\"og:video\"),\n  profileFirstName: p(\"profile:first_name\"),\n  profileLastName: p(\"profile:last_name\"),\n  profileUsername: p(\"profile:username\"),\n  refresh: {\n    metaKey: \"http-equiv\",\n    unpack: {\n      entrySeparator: \";\",\n      resolve({ key, value }) {\n        if (key === \"seconds\")\n          return `${value}`;\n      }\n    }\n  },\n  robots: {\n    unpack: {\n      entrySeparator: \", \",\n      resolve({ key, value }) {\n        if (typeof value === \"boolean\")\n          return `${fixKeyCase(key)}`;\n        else\n          return `${fixKeyCase(key)}:${value}`;\n      }\n    }\n  },\n  xUaCompatible: {\n    metaKey: \"http-equiv\"\n  }\n};\nconst openGraphNamespaces = /* @__PURE__ */ new Set([\n  \"og\",\n  \"book\",\n  \"article\",\n  \"profile\"\n]);\nfunction resolveMetaKeyType(key) {\n  const fKey = fixKeyCase(key);\n  const prefixIndex = fKey.indexOf(\":\");\n  if (openGraphNamespaces.has(fKey.substring(0, prefixIndex)))\n    return \"property\";\n  return MetaPackingSchema[key]?.metaKey || \"name\";\n}\nfunction resolveMetaKeyValue(key) {\n  return MetaPackingSchema[key]?.keyValue || fixKeyCase(key);\n}\nfunction fixKeyCase(key) {\n  const updated = key.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n  const prefixIndex = updated.indexOf(\"-\");\n  const fKey = updated.substring(0, prefixIndex);\n  if (fKey === \"twitter\" || openGraphNamespaces.has(fKey))\n    return key.replace(/([A-Z])/g, \":$1\").toLowerCase();\n  return updated;\n}\nfunction changeKeyCasingDeep(input) {\n  if (Array.isArray(input)) {\n    return input.map((entry) => changeKeyCasingDeep(entry));\n  }\n  if (typeof input !== \"object\" || Array.isArray(input))\n    return input;\n  const output = {};\n  for (const key in input) {\n    if (!Object.prototype.hasOwnProperty.call(input, key)) {\n      continue;\n    }\n    output[fixKeyCase(key)] = changeKeyCasingDeep(input[key]);\n  }\n  return output;\n}\nfunction resolvePackedMetaObjectValue(value, key) {\n  const definition = MetaPackingSchema[key];\n  if (key === \"refresh\")\n    return `${value.seconds};url=${value.url}`;\n  return unpackToString(\n    changeKeyCasingDeep(value),\n    {\n      keyValueSeparator: \"=\",\n      entrySeparator: \", \",\n      resolve({ value: value2, key: key2 }) {\n        if (value2 === null)\n          return \"\";\n        if (typeof value2 === \"boolean\")\n          return `${key2}`;\n      },\n      ...definition?.unpack\n    }\n  );\n}\nconst ObjectArrayEntries = /* @__PURE__ */ new Set([\"og:image\", \"og:video\", \"og:audio\", \"twitter:image\"]);\nfunction sanitize(input) {\n  const out = {};\n  for (const k2 in input) {\n    if (!Object.prototype.hasOwnProperty.call(input, k2)) {\n      continue;\n    }\n    const v = input[k2];\n    if (String(v) !== \"false\" && k2)\n      out[k2] = v;\n  }\n  return out;\n}\nfunction handleObjectEntry(key, v) {\n  const value = sanitize(v);\n  const fKey = fixKeyCase(key);\n  const attr = resolveMetaKeyType(fKey);\n  if (ObjectArrayEntries.has(fKey)) {\n    const input = {};\n    for (const k2 in value) {\n      if (!Object.prototype.hasOwnProperty.call(value, k2)) {\n        continue;\n      }\n      input[`${key}${k2 === \"url\" ? \"\" : `${k2[0].toUpperCase()}${k2.slice(1)}`}`] = value[k2];\n    }\n    return unpackMeta(input).sort((a, b) => (a[attr]?.length || 0) - (b[attr]?.length || 0));\n  }\n  return [{ [attr]: fKey, ...value }];\n}\nfunction unpackMeta(input) {\n  const extras = [];\n  const primitives = {};\n  for (const key in input) {\n    if (!Object.prototype.hasOwnProperty.call(input, key)) {\n      continue;\n    }\n    const value = input[key];\n    if (!Array.isArray(value)) {\n      if (typeof value === \"object\" && value) {\n        if (ObjectArrayEntries.has(fixKeyCase(key))) {\n          extras.push(...handleObjectEntry(key, value));\n          continue;\n        }\n        primitives[key] = sanitize(value);\n      } else {\n        primitives[key] = value;\n      }\n      continue;\n    }\n    for (const v of value) {\n      extras.push(...typeof v === \"string\" ? unpackMeta({ [key]: v }) : handleObjectEntry(key, v));\n    }\n  }\n  const meta = unpackToArray(primitives, {\n    key({ key }) {\n      return resolveMetaKeyType(key);\n    },\n    value({ key }) {\n      return key === \"charset\" ? \"charset\" : \"content\";\n    },\n    resolveKeyData({ key }) {\n      return resolveMetaKeyValue(key);\n    },\n    resolveValueData({ value, key }) {\n      if (value === null)\n        return \"_null\";\n      if (typeof value === \"object\")\n        return resolvePackedMetaObjectValue(value, key);\n      return typeof value === \"number\" ? value.toString() : value;\n    }\n  });\n  return [...extras, ...meta].map((m) => {\n    if (m.content === \"_null\")\n      m.content = null;\n    return m;\n  });\n}\nfunction packMeta(inputs) {\n  const mappedPackingSchema = Object.entries(MetaPackingSchema).map(([key, value]) => [key, value.keyValue]);\n  return packArray(inputs, {\n    key: [\"name\", \"property\", \"httpEquiv\", \"http-equiv\", \"charset\"],\n    value: [\"content\", \"charset\"],\n    resolveKey(k2) {\n      let key = mappedPackingSchema.filter((sk) => sk[1] === k2)?.[0]?.[0] || k2;\n      const replacer = (_, letter) => letter?.toUpperCase();\n      key = key.replace(/:([a-z])/g, replacer).replace(/-([a-z])/g, replacer);\n      return key;\n    }\n  });\n}\n\nfunction thenable(val, thenFn) {\n  if (val instanceof Promise) {\n    return val.then(thenFn);\n  }\n  return thenFn(val);\n}\n\nfunction normaliseTag(tagName, input, e, normalizedProps) {\n  const props = normalizedProps || normaliseProps(\n    // explicitly check for an object\n    // @ts-expect-error untyped\n    typeof input === \"object\" && typeof input !== \"function\" && !(input instanceof Promise) ? { ...input } : { [tagName === \"script\" || tagName === \"noscript\" || tagName === \"style\" ? \"innerHTML\" : \"textContent\"]: input },\n    tagName === \"templateParams\" || tagName === \"titleTemplate\"\n  );\n  if (props instanceof Promise) {\n    return props.then((val) => normaliseTag(tagName, input, e, val));\n  }\n  const tag = {\n    tag: tagName,\n    props\n  };\n  for (const k of TagConfigKeys) {\n    const val = tag.props[k] !== void 0 ? tag.props[k] : e[k];\n    if (val !== void 0) {\n      if (!(k === \"innerHTML\" || k === \"textContent\" || k === \"children\") || TagsWithInnerContent.has(tag.tag)) {\n        tag[k === \"children\" ? \"innerHTML\" : k] = val;\n      }\n      delete tag.props[k];\n    }\n  }\n  if (tag.props.body) {\n    tag.tagPosition = \"bodyClose\";\n    delete tag.props.body;\n  }\n  if (tag.tag === \"script\") {\n    if (typeof tag.innerHTML === \"object\") {\n      tag.innerHTML = JSON.stringify(tag.innerHTML);\n      tag.props.type = tag.props.type || \"application/json\";\n    }\n  }\n  return Array.isArray(tag.props.content) ? tag.props.content.map((v) => ({ ...tag, props: { ...tag.props, content: v } })) : tag;\n}\nfunction normaliseStyleClassProps(key, v) {\n  const sep = key === \"class\" ? \" \" : \";\";\n  if (v && typeof v === \"object\" && !Array.isArray(v)) {\n    v = Object.entries(v).filter(([, v2]) => v2).map(([k, v2]) => key === \"style\" ? `${k}:${v2}` : k);\n  }\n  return String(Array.isArray(v) ? v.join(sep) : v)?.split(sep).filter((c) => Boolean(c.trim())).join(sep);\n}\nfunction nestedNormaliseProps(props, virtual, keys, startIndex) {\n  for (let i = startIndex; i < keys.length; i += 1) {\n    const k = keys[i];\n    if (k === \"class\" || k === \"style\") {\n      props[k] = normaliseStyleClassProps(k, props[k]);\n      continue;\n    }\n    if (props[k] instanceof Promise) {\n      return props[k].then((val) => {\n        props[k] = val;\n        return nestedNormaliseProps(props, virtual, keys, i);\n      });\n    }\n    if (!virtual && !TagConfigKeys.has(k)) {\n      const v = String(props[k]);\n      const isDataKey = k.startsWith(\"data-\");\n      if (v === \"true\" || v === \"\") {\n        props[k] = isDataKey ? \"true\" : true;\n      } else if (!props[k]) {\n        if (isDataKey && v === \"false\")\n          props[k] = \"false\";\n        else\n          delete props[k];\n      }\n    }\n  }\n}\nfunction normaliseProps(props, virtual = false) {\n  const resolvedProps = nestedNormaliseProps(props, virtual, Object.keys(props), 0);\n  if (resolvedProps instanceof Promise) {\n    return resolvedProps.then(() => props);\n  }\n  return props;\n}\nconst TagEntityBits = 10;\nfunction nestedNormaliseEntryTags(headTags, tagPromises, startIndex) {\n  for (let i = startIndex; i < tagPromises.length; i += 1) {\n    const tags = tagPromises[i];\n    if (tags instanceof Promise) {\n      return tags.then((val) => {\n        tagPromises[i] = val;\n        return nestedNormaliseEntryTags(headTags, tagPromises, i);\n      });\n    }\n    if (Array.isArray(tags)) {\n      headTags.push(...tags);\n    } else {\n      headTags.push(tags);\n    }\n  }\n}\nfunction normaliseEntryTags(e) {\n  const tagPromises = [];\n  const input = e.resolvedInput;\n  for (const k in input) {\n    if (!Object.prototype.hasOwnProperty.call(input, k)) {\n      continue;\n    }\n    const v = input[k];\n    if (v === void 0 || !ValidHeadTags.has(k)) {\n      continue;\n    }\n    if (Array.isArray(v)) {\n      for (const props of v) {\n        tagPromises.push(normaliseTag(k, props, e));\n      }\n      continue;\n    }\n    tagPromises.push(normaliseTag(k, v, e));\n  }\n  if (tagPromises.length === 0) {\n    return [];\n  }\n  const headTags = [];\n  return thenable(nestedNormaliseEntryTags(headTags, tagPromises, 0), () => headTags.map((t, i) => {\n    t._e = e._i;\n    e.mode && (t._m = e.mode);\n    t._p = (e._i << TagEntityBits) + i;\n    return t;\n  }));\n}\n\nconst WhitelistAttributes = {\n  htmlAttrs: [\"id\", \"class\", \"lang\", \"dir\"],\n  bodyAttrs: [\"id\", \"class\"],\n  meta: [\"id\", \"name\", \"property\", \"charset\", \"content\"],\n  noscript: [\"id\", \"textContent\"],\n  script: [\"id\", \"type\", \"textContent\"],\n  link: [\"id\", \"color\", \"crossorigin\", \"fetchpriority\", \"href\", \"hreflang\", \"imagesrcset\", \"imagesizes\", \"integrity\", \"media\", \"referrerpolicy\", \"rel\", \"sizes\", \"type\"]\n};\nfunction acceptDataAttrs(value) {\n  const filtered = {};\n  Object.keys(value || {}).filter((a) => a.startsWith(\"data-\")).forEach((a) => {\n    filtered[a] = value[a];\n  });\n  return filtered;\n}\nfunction whitelistSafeInput(input) {\n  const filtered = {};\n  Object.keys(input).forEach((key) => {\n    const tagValue = input[key];\n    if (!tagValue)\n      return;\n    switch (key) {\n      case \"title\":\n      case \"titleTemplate\":\n      case \"templateParams\":\n        filtered[key] = tagValue;\n        break;\n      case \"htmlAttrs\":\n      case \"bodyAttrs\":\n        filtered[key] = acceptDataAttrs(tagValue);\n        WhitelistAttributes[key].forEach((a) => {\n          if (tagValue[a])\n            filtered[key][a] = tagValue[a];\n        });\n        break;\n      case \"meta\":\n        if (Array.isArray(tagValue)) {\n          filtered[key] = tagValue.map((meta) => {\n            const safeMeta = acceptDataAttrs(meta);\n            WhitelistAttributes.meta.forEach((key2) => {\n              if (meta[key2])\n                safeMeta[key2] = meta[key2];\n            });\n            return safeMeta;\n          }).filter((meta) => Object.keys(meta).length > 0);\n        }\n        break;\n      case \"link\":\n        if (Array.isArray(tagValue)) {\n          filtered[key] = tagValue.map((meta) => {\n            const link = acceptDataAttrs(meta);\n            WhitelistAttributes.link.forEach((key2) => {\n              const val = meta[key2];\n              if (key2 === \"rel\" && (val === \"stylesheet\" || val === \"canonical\" || val === \"modulepreload\" || val === \"prerender\" || val === \"preload\" || val === \"prefetch\"))\n                return;\n              if (key2 === \"href\") {\n                if (val.includes(\"javascript:\") || val.includes(\"data:\"))\n                  return;\n                link[key2] = val;\n              } else if (val) {\n                link[key2] = val;\n              }\n            });\n            return link;\n          }).filter((link) => Object.keys(link).length > 1 && !!link.rel);\n        }\n        break;\n      case \"noscript\":\n        if (Array.isArray(tagValue)) {\n          filtered[key] = tagValue.map((meta) => {\n            const noscript = acceptDataAttrs(meta);\n            WhitelistAttributes.noscript.forEach((key2) => {\n              if (meta[key2])\n                noscript[key2] = meta[key2];\n            });\n            return noscript;\n          }).filter((meta) => Object.keys(meta).length > 0);\n        }\n        break;\n      case \"script\":\n        if (Array.isArray(tagValue)) {\n          filtered[key] = tagValue.map((script) => {\n            const safeScript = acceptDataAttrs(script);\n            WhitelistAttributes.script.forEach((s) => {\n              if (script[s]) {\n                if (s === \"textContent\") {\n                  try {\n                    const jsonVal = typeof script[s] === \"string\" ? JSON.parse(script[s]) : script[s];\n                    safeScript[s] = JSON.stringify(jsonVal, null, 0);\n                  } catch (e) {\n                  }\n                } else {\n                  safeScript[s] = script[s];\n                }\n              }\n            });\n            return safeScript;\n          }).filter((meta) => Object.keys(meta).length > 0);\n        }\n        break;\n    }\n  });\n  return filtered;\n}\n\nconst NetworkEvents = /* @__PURE__ */ new Set([\"onload\", \"onerror\", \"onabort\", \"onprogress\", \"onloadstart\"]);\nconst ScriptNetworkEvents = /* @__PURE__ */ new Set([\"onload\", \"onerror\"]);\n\nconst TAG_WEIGHTS = {\n  // tags\n  base: -10,\n  title: 10\n};\nconst TAG_ALIASES = {\n  // relative scores to their default values\n  critical: -80,\n  high: -10,\n  low: 20\n};\nfunction tagWeight(tag) {\n  const priority = tag.tagPriority;\n  if (typeof priority === \"number\")\n    return priority;\n  let weight = 100;\n  if (tag.tag === \"meta\") {\n    if (tag.props[\"http-equiv\"] === \"content-security-policy\")\n      weight = -30;\n    else if (tag.props.charset)\n      weight = -20;\n    else if (tag.props.name === \"viewport\")\n      weight = -15;\n  } else if (tag.tag === \"link\" && tag.props.rel === \"preconnect\") {\n    weight = 20;\n  } else if (tag.tag in TAG_WEIGHTS) {\n    weight = TAG_WEIGHTS[tag.tag];\n  }\n  if (priority && priority in TAG_ALIASES) {\n    return weight + TAG_ALIASES[priority];\n  }\n  return weight;\n}\nconst SortModifiers = [{ prefix: \"before:\", offset: -1 }, { prefix: \"after:\", offset: 1 }];\n\nconst allowedMetaProperties = [\"name\", \"property\", \"http-equiv\"];\nfunction tagDedupeKey(tag) {\n  const { props, tag: tagName } = tag;\n  if (UniqueTags.has(tagName))\n    return tagName;\n  if (tagName === \"link\" && props.rel === \"canonical\")\n    return \"canonical\";\n  if (props.charset)\n    return \"charset\";\n  if (props.id) {\n    return `${tagName}:id:${props.id}`;\n  }\n  for (const n of allowedMetaProperties) {\n    if (props[n] !== void 0) {\n      return `${tagName}:${n}:${props[n]}`;\n    }\n  }\n  return false;\n}\n\nconst sepSub = \"%separator\";\nfunction sub(p, token, isJson = false) {\n  let val;\n  if (token === \"s\" || token === \"pageTitle\") {\n    val = p.pageTitle;\n  } else if (token.includes(\".\")) {\n    const dotIndex = token.indexOf(\".\");\n    val = p[token.substring(0, dotIndex)]?.[token.substring(dotIndex + 1)];\n  } else {\n    val = p[token];\n  }\n  if (val !== void 0) {\n    return isJson ? (val || \"\").replace(/\"/g, '\\\\\"') : val || \"\";\n  }\n  return void 0;\n}\nconst sepSubRe = new RegExp(`${sepSub}(?:\\\\s*${sepSub})*`, \"g\");\nfunction processTemplateParams(s, p, sep, isJson = false) {\n  if (typeof s !== \"string\" || !s.includes(\"%\"))\n    return s;\n  let decoded = s;\n  try {\n    decoded = decodeURI(s);\n  } catch {\n  }\n  const tokens = decoded.match(/%\\w+(?:\\.\\w+)?/g);\n  if (!tokens) {\n    return s;\n  }\n  const hasSepSub = s.includes(sepSub);\n  s = s.replace(/%\\w+(?:\\.\\w+)?/g, (token) => {\n    if (token === sepSub || !tokens.includes(token)) {\n      return token;\n    }\n    const re = sub(p, token.slice(1), isJson);\n    return re !== void 0 ? re : token;\n  }).trim();\n  if (hasSepSub) {\n    if (s.endsWith(sepSub))\n      s = s.slice(0, -sepSub.length);\n    if (s.startsWith(sepSub))\n      s = s.slice(sepSub.length);\n    s = s.replace(sepSubRe, sep).trim();\n  }\n  return s;\n}\n\nfunction resolveTitleTemplate(template, title) {\n  if (template == null)\n    return title || null;\n  if (typeof template === \"function\")\n    return template(title);\n  return template;\n}\n\nexport { HasElementTags, IsBrowser, NetworkEvents, ScriptNetworkEvents, SelfClosingTags, SortModifiers, TAG_ALIASES, TAG_WEIGHTS, TagConfigKeys, TagEntityBits, TagsWithInnerContent, UniqueTags, ValidHeadTags, asArray$1 as asArray, composableNames, defineHeadPlugin, hashCode, hashTag, normaliseEntryTags, normaliseProps, normaliseStyleClassProps, normaliseTag, packMeta, processTemplateParams, resolveMetaKeyType, resolveMetaKeyValue, resolvePackedMetaObjectValue, resolveTitleTemplate, tagDedupeKey, tagWeight, thenable, unpackMeta, whitelistSafeInput };\n", "import { TagsWithInnerContent, SelfClosingTags } from '@unhead/shared';\n\nfunction encodeAttribute(value) {\n  return String(value).replace(/\"/g, \"&quot;\");\n}\nfunction propsToString(props) {\n  let attrs = \"\";\n  for (const key in props) {\n    if (!Object.prototype.hasOwnProperty.call(props, key)) {\n      continue;\n    }\n    const value = props[key];\n    if (value !== false && value !== null) {\n      attrs += value === true ? ` ${key}` : ` ${key}=\"${encodeAttribute(value)}\"`;\n    }\n  }\n  return attrs;\n}\n\nfunction ssrRenderTags(tags, options) {\n  const schema = { htmlAttrs: {}, bodyAttrs: {}, tags: { head: \"\", bodyClose: \"\", bodyOpen: \"\" } };\n  const lineBreaks = !options?.omitLineBreaks ? \"\\n\" : \"\";\n  for (const tag of tags) {\n    if (Object.keys(tag.props).length === 0 && !tag.innerHTML && !tag.textContent) {\n      continue;\n    }\n    if (tag.tag === \"htmlAttrs\" || tag.tag === \"bodyAttrs\") {\n      Object.assign(schema[tag.tag], tag.props);\n      continue;\n    }\n    const s = tagToString(tag);\n    const tagPosition = tag.tagPosition || \"head\";\n    schema.tags[tagPosition] += schema.tags[tagPosition] ? `${lineBreaks}${s}` : s;\n  }\n  return {\n    headTags: schema.tags.head,\n    bodyTags: schema.tags.bodyClose,\n    bodyTagsOpen: schema.tags.bodyOpen,\n    htmlAttrs: propsToString(schema.htmlAttrs),\n    bodyAttrs: propsToString(schema.bodyAttrs)\n  };\n}\n\nfunction escapeHtml(str) {\n  return str.replace(/[&<>\"'/]/g, (char) => {\n    switch (char) {\n      case \"&\":\n        return \"&amp;\";\n      case \"<\":\n        return \"&lt;\";\n      case \">\":\n        return \"&gt;\";\n      case '\"':\n        return \"&quot;\";\n      case \"'\":\n        return \"&#x27;\";\n      case \"/\":\n        return \"&#x2F;\";\n      default:\n        return char;\n    }\n  });\n}\nfunction tagToString(tag) {\n  const attrs = propsToString(tag.props);\n  const openTag = `<${tag.tag}${attrs}>`;\n  if (!TagsWithInnerContent.has(tag.tag))\n    return SelfClosingTags.has(tag.tag) ? openTag : `${openTag}</${tag.tag}>`;\n  let content = String(tag.innerHTML || \"\");\n  if (tag.textContent)\n    content = escapeHtml(String(tag.textContent));\n  return SelfClosingTags.has(tag.tag) ? openTag : `${openTag}${content}</${tag.tag}>`;\n}\n\nasync function renderSSRHead(head, options) {\n  const beforeRenderCtx = { shouldRender: true };\n  await head.hooks.callHook(\"ssr:beforeRender\", beforeRenderCtx);\n  if (!beforeRenderCtx.shouldRender) {\n    return {\n      headTags: \"\",\n      bodyTags: \"\",\n      bodyTagsOpen: \"\",\n      htmlAttrs: \"\",\n      bodyAttrs: \"\"\n    };\n  }\n  const ctx = { tags: await head.resolveTags() };\n  await head.hooks.callHook(\"ssr:render\", ctx);\n  const html = ssrRenderTags(ctx.tags, options);\n  const renderCtx = { tags: ctx.tags, html };\n  await head.hooks.callHook(\"ssr:rendered\", renderCtx);\n  return renderCtx.html;\n}\n\nexport { escapeHtml, propsToString, renderSSRHead, ssrRenderTags, tagToString };\n"],
  "mappings": "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",
  "names": ["Vue2ProvideUnheadPlugin"]
}
